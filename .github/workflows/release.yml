name: Release

on:
  push:
    tags:
    - 'v*'
    - 't*'

jobs:
  # Create a github release to hold the assets once built.
  create_release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create Release
        id: create_release
        # uses: ncipollo/release-action@v1
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref }}
          draft: true
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Set environmental variables that will be available to all builds.
  set_env:
    runs-on: ubuntu-latest
    needs: create_release
    steps:
      - name: Set release variables
        run: |
          # echo "GO111MODULE=on" >> $GITHUB_ENV
          # Release version is ref name without leading character.
          RELEASE_VERSION=$(echo ${{ github.ref_name }} | sed -e 's/^[vt]//')
          echo "RELEASE_VERSION=${RELEASE_VERSION}" >> $GITHUB_ENV
          echo id is ${{ needs.create_release.outputs.id }}
          echo upload_url is ${{ needs.create_release.outputs.upload_url }}


  # Build and pack the binaries for linux.
  build_linux:
    runs-on: ubuntu-latest
    needs: set_env
    steps:
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: ^1.19

      - name: Check out repository into the Go module directory
        uses: actions/checkout@v3

      - name: Select correct tag
        run: git checkout ${{ github.ref_name }}

      - name: Fetch repository dependencies
        run: go get -v -t ./...

      - name: Compile
        run: |
          go build -tags osusergo,netgo -ldflags="-extldflags=-static" -v -ldflags="-X github.com/wealdtech/ethereal/cmd.ReleaseVersion=${{ github.ref_name }}"
          tar zcf ethereal-${{ github.ref_name }}-linux-amd64.tar.gz ethereal
          sha256sum ethereal-${{ github.ref_name }}-linux-amd64.tar.gz | sed -e 's/ .*//' >ethereal-${{ github.ref_name }}-linux-amd64.tar.gz.sha256
      - name: Upload binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./ethereal-${{ github.ref_name }}-linux-amd64.tar.gz
          asset_name: ethereal-${{ github.ref_name }}-linux-amd64.tar.gz
          asset_content_type: application/octet-stream

      - name: Upload hash
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./ethereal-${{ github.ref_name }}-linux-amd64.tar.gz.sha256
          asset_name: ethereal-${{ github.ref_name }}-linux-amd64.tar.gz.sha256
          asset_content_type: text/plain

      - name: Cross compile (ARM64)
        run: |
          GOOS=linux GOARCH=arm64 go build -tags osusergo,netgo -ldflags="-extldflags=-static" -v -ldflags="-X github.com/wealdtech/ethereal/cmd.ReleaseVersion=${{ github.ref_name }}"
          tar zcf ethereal-${{ github.ref_name }}-linux-arm64.tar.gz ethereal
          sha256sum ethereal-${{ github.ref_name }}-linux-arm64.tar.gz | sed -e 's/ .*//' >ethereal-${{ github.ref_name }}-linux-arm64.tar.gz.sha256

      - name: Upload binary (ARM64)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./ethereal-${{ github.ref_name }}-linux-arm64.tar.gz
          asset_name: ethereal-${{ github.ref_name }}-linux-arm64.tar.gz
          asset_content_type: application/octet-stream

      - name: Upload hash (ARM64)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./ethereal-${{ github.ref_name }}-linux-arm64.tar.gz.sha256
          asset_name: ethereal-${{ github.ref_name }}-linux-arm64.tar.gz.sha256
          asset_content_type: text/plain

  # Build and pack the binaries for OSX.
  build_macos:
    runs-on: macos-latest
    needs: set_env
    steps:
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: ^1.19

      - name: Check out repository into the Go module directory
        uses: actions/checkout@v3

      - name: Select correct tag
        run: git checkout ${{ github.ref_name }}

      - name: Fetch repository dependencies
        run: go get -v -t ./...

      - name: Compile
        run: |
          go build -tags osusergo,netgo -ldflags="-extldflags=-static" -v -ldflags="-X github.com/wealdtech/ethereal/cmd.ReleaseVersion=${{ github.ref_name }}"
          tar zcf ethereal-${{ github.ref_name }}-darwin-amd64.tar.gz ethereal
          brew install coreutils
          sha256sum ethereal-${{ github.ref_name }}-darwin-amd64.tar.gz | sed -e 's/ .*//' >ethereal-${{ github.ref_name }}-darwin-amd64.tar.gz.sha256
      - name: Upload binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./ethereal-${{ github.ref_name }}-darwin-amd64.tar.gz
          asset_name: ethereal-${{ github.ref_name }}-darwin-amd64.tar.gz
          asset_content_type: application/octet-stream

      - name: Upload hash
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./ethereal-${{ github.ref_name }}-darwin-amd64.tar.gz.sha256
          asset_name: ethereal-${{ github.ref_name }}-darwin-amd64.tar.gz.sha256
          asset_content_type: text/plain

  # Build and pack the binaries for Windows.
  build_windows:
    runs-on: windows-latest
    needs: set_env
    steps:
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: ^1.19

      - name: Check out repository into the Go module directory
        uses: actions/checkout@v3

      - name: Select correct tag
        run: git checkout ${{ github.ref_name }}

      - name: Fetch repository dependencies
        run: go get -v -t ./...

      - name: Compile
        run: |
          go build -tags osusergo,netgo -ldflags="-extldflags=-static" -v -ldflags="-X github.com/wealdtech/ethereal/cmd.ReleaseVersion=${{ github.ref_name }}"
          choco install zip
          zip --junk-paths ethereal-${{ github.ref_name }}-windows-exe.zip ethereal.exe
          $FileHash=(certutil -hashfile ethereal-${{ github.ref_name }}-windows-exe.zip SHA256 | findstr /v hash | findstr /v SHA).replace(" ", "")
          echo "$FileHash" > ethereal-${{ github.ref_name }}-windows-exe.zip.sha256

      - name: Upload binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./ethereal-${{ github.ref_name }}-windows-exe.zip
          asset_name: ethereal-${{ github.ref_name }}-windows-exe.zip
          asset_content_type: application/octet-stream

      - name: Upload hash
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./ethereal-${{ github.ref_name }}-windows-exe-zip.sha256
          asset_name: ethereal-${{ github.ref_name }}-windows-exe-zip.sha256
          asset_content_type: text/plain

       # - name: Create release
       #   id: create_release
       #   uses: softprops/action-gh-release@v1
       #   with:
       #     name: Release ${{ github.ref_name }}
       #     draft: true
       #     prerelease: false
       #     files: |
       #       ethereal-${{ github.ref_name }}-linux-amd64.tar.gz
       #       ethereal-${{ github.ref_name }}-linux-amd64.tar.gz.sha256
       #       ethereal-${{ github.ref_name }}-linux-arm64.tar.gz
       #       ethereal-${{ github.ref_name }}-linux-arm64.tar.gz.sha256
       #       ethereal-${{ github.ref_name }}-windows-exe.zip
       #       ethereal-${{ github.ref_name }}-windows-exe.zip.sha256
       #       ethereal-${{ github.ref_name }}-darwin-amd64.tar.gz
       #       ethereal-${{ github.ref_name }}-darwin-amd64.tar.gz.sha256
