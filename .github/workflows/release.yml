name: Release

on:
  push:
    tags:
    - 'v*'
    - 't*'

jobs:
  # Create a github release to hold the assets once built.
  create_release:
    runs-on: ubuntu-22.04
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_id: ${{ steps.create_release.outputs.id }}
    steps:
      - name: Create Release
        id: create_release
        uses: ncipollo/release-action@v1
        with:
          draft: true
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}

  # Create a github release to hold the assets once built.
  build:
    runs-on: ${{ matrix.os }}
    needs: create_release
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: ^1.19

      - name: Check out repository into the Go module directory
        uses: actions/checkout@v3

      - name: Select correct tag
        run: git checkout ${{ github.ref_name }}

      - name: Fetch repository dependencies
        run: go get -v -t ./...

      # - name: Set environment variables
      #   run: |
      #     echo "GO111MODULE=on" >> $GITHUB_ENV
      #     # Release version is ref name without leading character.
      #     RELEASE_VERSION=$(echo ${{ github.ref_name }} | sed -e 's/^[vt]//')
      #     echo "RELEASE_VERSION=${RELEASE_VERSION}" >> $GITHUB_ENV

      - name: Compile (linux AMD64)
        if: contains(matrix.os, 'ubuntu')
        run: |
          go build -tags osusergo,netgo -ldflags="-extldflags=-static" -v -ldflags="-X github.com/wealdtech/ethereal/cmd.ReleaseVersion=${{ github.ref_name }}"
          tar zcf ethereal-${{ github.ref_name }}-linux-amd64.tar.gz ethereal
          sha256sum ethereal-${{ github.ref_name }}-linux-amd64.tar.gz >ethereal-${{ github.ref_name }}-linux-amd64.tar.gz.sha256

      - name: Cross compile (linux ARM64)
        if: contains(matrix.os, 'ubuntu')
        run: |
          GOOS=linux GOARCH=arm64 go build -tags osusergo,netgo -ldflags="-extldflags=-static" -v -ldflags="-X github.com/wealdtech/ethereal/cmd.ReleaseVersion=${{ github.ref_name }}"
          tar zcf ethereal-${{ github.ref_name }}-linux-arm64.tar.gz ethereal
          sha256sum ethereal-${{ github.ref_name }}-linux-arm64.tar.gz >ethereal-${{ github.ref_name }}-linux-arm64.tar.gz.sha256

      - name: Compile (windows)
        if: contains(matrix.os, 'windows')
        run: |
          go build -tags osusergo,netgo -ldflags="-extldflags=-static" -v -ldflags="-X github.com/wealdtech/ethereal/cmd.ReleaseVersion=${{ github.ref_name }}"
          choco install zip
          zip --junk-paths ethereal-${{ github.ref_name }}-windows-exe.zip ethereal.exe
          $FileHash=(certutil -hashfile ethereal-${{ github.ref_name }}-windows-exe.zip SHA256 | findstr /v hash | findstr /v SHA).replace(" ", "")
          echo "$FileHash" > ethereal-${{ github.ref_name }}-windows-exe.zip.sha256
          echo windows
          dir
          echo end windows

      - name: Compile (macos)
        if: contains(matrix.os, 'macos')
        run: |
          go build -tags osusergo,netgo -ldflags="-extldflags=-static" -v -ldflags="-X github.com/wealdtech/ethereal/cmd.ReleaseVersion=${{ github.ref_name }}"
          tar zcf ethereal-${{ github.ref_name }}-darwin-amd64.tar.gz ethereal
          brew install coreutils
          sha256sum ethereal-${{ github.ref_name }}-darwin-amd64.tar.gz >ethereal-${{ github.ref_name }}-darwin-amd64.tar.gz.sha256
          echo macos
          ls -l
          echo end macos

          #  upload:
          #    runs-on: ${{ matrix.os }}
          #    needs: build
          #    strategy:
          #      fail-fast: false
          #      matrix:
          #        os: [ubuntu-latest, macos-latest, windows-latest]
          #    steps:

       # - name: Create release
       #   id: create_release
       #   uses: softprops/action-gh-release@v1
       #   with:
       #     name: Release ${{ github.ref_name }}
       #     draft: true
       #     prerelease: false
       #     files: |
       #       ethereal-${{ github.ref_name }}-linux-amd64.tar.gz
       #       ethereal-${{ github.ref_name }}-linux-amd64.tar.gz.sha256
       #       ethereal-${{ github.ref_name }}-linux-arm64.tar.gz
       #       ethereal-${{ github.ref_name }}-linux-arm64.tar.gz.sha256
       #       ethereal-${{ github.ref_name }}-windows-exe.zip
       #       ethereal-${{ github.ref_name }}-windows-exe.zip.sha256
       #       ethereal-${{ github.ref_name }}-darwin-amd64.tar.gz
       #       ethereal-${{ github.ref_name }}-darwin-amd64.tar.gz.sha256
