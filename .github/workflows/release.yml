name: Release

on:
  push:
    tags:
    - 'v*'
    - 't*'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Set up Go 1.x
        uses: actions/setup-go@v3
        with:
          go-version: ^1.18

      - name: Check out code into the Go module directory
        uses: actions/checkout@v3

      - name: Get dependencies
        run: go get -v -t ./...

      - name: Set env
        run: |
          echo "GO111MODULE=on" >> $GITHUB_ENV
          # Release version is ref name without leading 'v'.
          echo "REF_NAME=$github.ref_name" >> $GITHUB_ENV
          RELEASE_VERSION=$(echo $github.ref_name | sed -e 's!.*/[vt]!!')
          echo "RELEASE_VERSION=${RELEASE_VERSION}" >> $GITHUB_ENV
          echo "RELEASE_VERSION=${RELEASE_VERSION}" >> $GITHUB_OUTPUT
          echo Export
          export
          echo End Export
          echo Env
          cat $GITHUB_ENV
          echo End Env

      - name: Compile linux AMD64
        run: |
          GOOS=linux GOARCH=amd64 go build -tags osusergo,netgo -ldflags="-extldflags=-static" -v -ldflags="-X github.com/wealdtech/ethereal/cmd.ReleaseVersion=${env.RELEASE_VERSION}"
          tar zcf ethereal-${env.RELEASE_VERSION}-linux-amd64.tar.gz ethereal
          sha256sum ethereal-${env.RELEASE_VERSION}-linux-amd64.tar.gz >ethereal-${env.RELEASE_VERSION}-linux-amd64.tar.gz.sha256

          echo ls
          ls -l
          echo End ls
      # - name: Compile linux ARM64
      #   run: |
      #     GOOS=linux GOARCH=arm64 go build -tags osusergo,netgo -ldflags="-extldflags=-static" -v -ldflags="-X github.com/wealdtech/ethereal/cmd.ReleaseVersion=${RELEASE_VERSION}"
      #     tar zcf ethereal-${RELEASE_VERSION}-linux-arm64.tar.gz ethereal
      #     sha256sum ethereal-${RELEASE_VERSION}-linux-arm64.tar.gz >ethereal-${RELEASE_VERSION}-linux-arm64.tar.gz.sha256

      # - name: Compile windows
      #   run: |
      #     GOOS=windows GOARCH=amd64 go build -tags osusergo,netgo -ldflags="-extldflags=-static" -v -ldflags="-X github.com/wealdtech/ethereal/cmd.ReleaseVersion=${RELEASE_VERSION}"
      #     zip --junk-paths ethereal-${RELEASE_VERSION}-windows-exe.zip ethereal.exe
      #     sha256sum ethereal-${RELEASE_VERSION}-windows-exe.zip >ethereal-${RELEASE_VERSION}-windows-exe.zip.sha256

      # - name: Compile osx AMD64
      #   run: |
      #     GOOS=darwin GOARCH=amd64 go build -tags osusergo,netgo -ldflags="-extldflags=-static" -v -ldflags="-X github.com/wealdtech/ethereal/cmd.ReleaseVersion=${RELEASE_VERSION}"
      #     tar zcf ethereal-${RELEASE_VERSION}-darwin-amd64.tar.gz ethereal
      #     sha256sum ethereal-${RELEASE_VERSION}-darwin-amd64.tar.gz >ethereal-${RELEASE_VERSION}-darwin-amd64.tar.gz.sha256

      - name: Create release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          # token: ${{ secrets.GITHUB_TOKEN }}
          name: Release ${{ env.RELEASE_VERSION }}
          draft: true
          prerelease: false
          files: |
            ethereal-${env.RELEASE_VERSION}-linux-amd64.tar.gz
            ethereal-${env.RELEASE_VERSION}-linux-amd64.tar.gz.sha256
            # ethereal-${env.RELEASE_VERSION}-linux-arm64.tar.gz
            # ethereal-${env.RELEASE_VERSION}-linux-arm64.tar.gz.sha256
            # ethereal-${env.RELEASE_VERSION}-windows-exe.zip
            # ethereal-${env.RELEASE_VERSION}-windows-exe.zip.sha256
            # ethereal-${env.RELEASE_VERSION}-darwin-amd64.tar.gz
            # ethereal-${env.RELEASE_VERSION}-darwin-amd64.tar.gz.sha256
